// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  refresh_token_expires_in Int?
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  loginUsername String? @unique
  loginPassword String?
  lastRequestTime DateTime?
  verified  Boolean @default(false)
  admin Boolean @default(false)
  createdAt DateTime @default(now())

  reservatons Reservation[]
  reservationRequests ReservationRequest[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Reservation{
  id        Int           @id @default(autoincrement())
  daySinceEpoch Int
  date DateTime
  startTime String
  endTime String

  room Room @relation(fields: [roomId], references: [id])
  roomId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Room{
  id Int @id @default(autoincrement())
  name String @unique
  tech Boolean
  priority Int
  eid Int @unique
  seats Boolean?

  reservations Reservation[]
}

model ReservationRequest{
  id Int @id @default(autoincrement())
  dow String
  iso_weekday Int
  slots30mins Int
  startTime String
  endTime String
  active Boolean @default(false)

  user User @relation(fields:[userId], references: [id], onDelete: Cascade)
  userId String
}